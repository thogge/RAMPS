"""
fix_all_baselines.py

Script to run fix_ramps_parallel.py on all RAMPS data cubes 
that have not been baseline subtracted. Additionally, there 
is an option to fit all cubes, even those that have been 
fit previously. This option will overwrite the previously 
fit cubes. 

Example:
python fix_all_baselines.py -o

-o : Overwrite  -- Flag to overwrite previously fit data
-h : Help       -- Display this help

"""

import sys,os,getopt
import numpy as np
import pdb

overwrite = False
try:
    opts,args = getopt.getopt(sys.argv[1:],":oh")
except getopt.GetoptError,err:
    print(str(err))
    print(__doc__)
    sys.exit(2)
for o,a in opts:
    if o == "-o":
        overwrite = True
    elif o == "-h":
        print(__doc__)
        sys.exit(1)
    else:
        assert False, "unhandled option"
        print(__doc__)
        sys.exit(2)

rootdir = "/projectnb2/jjgroup/thogge/ramps/"
cubedir = rootdir+"cubes/"
template_files_dir = cubedir+"/L23/field/tiles/"
scripts_dir = rootdir+"scripts/python/"

completed_fields = ["L26","L33"]
freq_list = ["23870","24139","24532","21301","21431","21550","21981","22344","23444","23963"]
freq_to_trans_dict = {"23870":"NH3_3-3","24139":"NH3_4-4","24532":"NH3_5-5","21301":"HC5N_8-7","21431":"HC7N_19-18","21550":"CH3OH_12-11","21981":"HNCO_1-0","22344":"CCS_2-1","23444":"CH3OH_10-9","23963":"HC5N_9-8"}
vmins = np.array(["-30","-30","-30","-30","-30","-140","-30","-30","-140","-30"])
vmaxs = np.array(["140","140","140","140","140","140","140","140","140","140"])
downsamples = np.array(["11","11","11","11","11","7","11","11","7","11"])

fields = np.concatenate((np.arange(32)+10,np.array([43,45,47]))).astype(str)


for field in fields:
    field_basedir = cubedir+ "L" + field
    final_dir = field_basedir + "/field/"
    combine_dir = field_basedir + "/field/tiles/"
    if "L"+field in completed_fields:
        continue
    else: 
        crits = []
        for frq in freq_list:
            if (os.path.exists(combine_dir+"L"+field+"_"+freq_to_trans_dict[frq]+"_fixed.fits") and os.path.exists(combine_dir+"L"+field+"_"+freq_to_trans_dict[frq]+"_mom0.fits") and os.path.exists(combine_dir+"L"+field+"_"+freq_to_trans_dict[frq]+"_mom1.fits") and os.path.exists(combine_dir+"L"+field+"_"+freq_to_trans_dict[frq]+"_rms.fits")) or (os.path.exists(final_dir+"L"+field+"_"+freq_to_trans_dict[frq]+"_fixed.fits") and os.path.exists(final_dir+"L"+field+"_"+freq_to_trans_dict[frq]+"_mom0.fits") and os.path.exists(final_dir+"L"+field+"_"+freq_to_trans_dict[frq]+"_mom1.fits") and os.path.exists(final_dir+"L"+field+"_"+freq_to_trans_dict[frq]+"_rms.fits")):
                crits.append(True)
            else:
                crits.append(False)
        crits = np.asarray(crits)
        if crits.all():
            completed_fields.append("L"+field)
            continue

    print field_basedir
    for subdir in os.listdir(field_basedir):
        tiledir = field_basedir + "/" + subdir
        if os.path.isfile(tiledir) or "field" in subdir:
            continue
        else:
            print tiledir
            all_files = os.listdir(tiledir)
            file_list = [s for s in all_files if "MHz_line.fits" in s and "23694" not in s and "23722" not in s and "22235" not in s]
            for files in file_list:
                fitsfile = tiledir + "/" + files
                if os.path.isdir(fitsfile):
                    print "There is an extra directory here called " + files + " . Skipping."
                else:
                    if os.path.exists(combine_dir+files):
                        execute_string = "mv "+fitsfile+" "+combine_dir+files[:-5]+"2.fits"
                    else:
                        execute_string = "mv "+fitsfile+" "+combine_dir+files
                    print(execute_string)
                    os.system(execute_string)


    os.chdir(combine_dir)
    all_files = os.listdir(combine_dir)
    for i,freq in enumerate(freq_list):
        freq_file_list = [s for s in all_files if freq+"_MHz_line.fits" in s]
        combine_input_string = ""
        for ff in freq_file_list:
            if ff == freq_file_list[-1]:
                combine_input_string += ff
            else:
                combine_input_string += ff+","
        combine_file = "L"+field+"_"+freq+"_MHz_line.fits"
        regrid_file = "regrid_"+freq+"_template_map.fits"
        if not os.path.exists(regrid_file):
            execute_string = "cp "+template_files_dir+regrid_file+" ."
            print(execute_string)
            os.system(execute_string)
        if not os.path.exists(combine_file):
            execute_string = "python "+scripts_dir+"combine_raw_fits_data.py -i "+combine_input_string+" -o "+combine_file+" -r "+regrid_file+" -n 28"+" -csd"
            print(execute_string)
            os.system(execute_string)

        execute_string = "python "+scripts_dir+"fix_header_restfreq.py -i "+combine_file
        print(execute_string)
        os.system(execute_string)

        crop_file = combine_file[:-5]+"_crop.fits"
        if not os.path.exists(crop_file):
            execute_string = "python "+scripts_dir+"crop_cube_spectra.py -i "+combine_file+" -o "+crop_file+" -s "+vmaxs[i]+" -e "+vmins[i]+" -v"
            print(execute_string)
            os.system(execute_string)

        fixed_file = "L"+field+"_"+freq_to_trans_dict[freq]+"_fixed.fits"
        mom0_file = "L"+field+"_"+freq_to_trans_dict[freq]+"_mom0.fits"
        mom1_file = "L"+field+"_"+freq_to_trans_dict[freq]+"_mom1.fits"
        if not os.path.exists(fixed_file) and not os.path.exists(mom0_file) and not os.path.exists(mom1_file):
            execute_string = "python "+scripts_dir+"output_baseline_data_3sig.py -i "+crop_file+" -o L"+field+"_"+freq_to_trans_dict[freq]+" -s "+downsamples[i]+" -v 20 -b "+downsamples[i]+" -f01 -p 3 -n 28"
            print(execute_string)
            os.system(execute_string)

        rms_file = "L"+field+"_"+freq_to_trans_dict[freq]+"_rms.fits"
        if not os.path.exists(rms_file):
            execute_string = "python "+scripts_dir+"make_rms_map.py -i "+fixed_file+" -o "+"L"+field+"_"+freq_to_trans_dict[freq]+"_rms.fits -n 28"
            print(execute_string)
            os.system(execute_string)
        #pdb.set_trace()
    crits = []
    for frq in freq_list:
        if (os.path.exists(combine_dir+"L"+field+"_"+freq_to_trans_dict[frq]+"_fixed.fits") and os.path.exists(combine_dir+"L"+field+"_"+freq_to_trans_dict[frq]+"_mom0.fits") and os.path.exists(combine_dir+"L"+field+"_"+freq_to_trans_dict[frq]+"_mom1.fits") and os.path.exists(combine_dir+"L"+field+"_"+freq_to_trans_dict[frq]+"_rms.fits")) or (os.path.exists(final_dir+"L"+field+"_"+freq_to_trans_dict[frq]+"_fixed.fits") and os.path.exists(final_dir+"L"+field+"_"+freq_to_trans_dict[frq]+"_mom0.fits") and os.path.exists(final_dir+"L"+field+"_"+freq_to_trans_dict[frq]+"_mom1.fits") and os.path.exists(final_dir+"L"+field+"_"+freq_to_trans_dict[frq]+"_rms.fits")):
            crits.append(True)
        else:
            crits.append(False)
    crits = np.asarray(crits)
    if crits.all():
        completed_fields.append("L"+field)
